/*
1.
成员指针分为成员函数指针，数据成员指针，注意，数据成员指针或虚函数成员指针并没有真的指向一个内存，
它只是表示表示在当前的类，那个字段的位置而已，比如&X::value表示的只是这个数据成员value在X类中的位置。
2. 数据成员指针和虚成员函数指针是一个类似偏移量的东西，
成员函数指针则真的存储了一个地址。（我们将在最后为了讲述这个）
3.成员指针也没办法脱离类的实例对象单独使用，
不管是非静态数据成员指针还是非静态成员函数指针
(非要强制转换成员函数指针也是可以的)。
4.静态数据成员和静态成员函数不与类关联，
也就不参与这个成员指针的讨论了，切记。

实际上我之前打算是直接说成员指针不是指针，
毕竟std::is_pointer也没把它包含在内，
也不同于一般的指针的行为，但是，标准没规定它是什么，
所以我也就严谨一点，只说，成员指针不是常规的指针。
*/

#include <iostream>

struct X {
    void f() { std::cout << "6\n"; }
};

int main(int arvc, char *argv[]) {

    void (X::*p)() = &X::f;
    X x;
    (x.*p)();

    return 0;
}